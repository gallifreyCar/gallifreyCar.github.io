<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gallifrey&#39;s Blog</title>
  
  <subtitle>个人文章归档</subtitle>
  <link href="https://github.com/ufovsmba/atom.xml" rel="self"/>
  
  <link href="https://github.com/ufovsmba/"/>
  <updated>2022-03-28T04:08:58.584Z</updated>
  <id>https://github.com/ufovsmba/</id>
  
  <author>
    <name>Gallifrey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统笔记（一）</title>
    <link href="https://github.com/ufovsmba/2022/03/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://github.com/ufovsmba/2022/03/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-03-22T08:58:38.000Z</published>
    <updated>2022-03-28T04:08:58.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统的概念，功能和目标"><a href="#操作系统的概念，功能和目标" class="headerlink" title="操作系统的概念，功能和目标"></a>操作系统的概念，功能和目标</h2><h4 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h4><p>操作系统（Operating System，OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源分配，以提供给用户和其他软件方便的接口和环境，是计算机系统中最基本的系统软件。</p><h4 id="操作系统的功能和目标"><a href="#操作系统的功能和目标" class="headerlink" title="操作系统的功能和目标"></a>操作系统的功能和目标</h4><p>补充知识：进程是应该程序的执行过程，执行前需要将该程序放到内存中，才能CPU处理。</p><h5 id="功能和目标"><a href="#功能和目标" class="headerlink" title="功能和目标"></a>功能和目标</h5><ul><li>作为系统资源的管理者<ul><li>功能<ul><li>处理机管理</li><li>储存机管理</li><li>文件管理</li><li>设备管理</li></ul></li><li>目标<ul><li>安全</li><li>高效</li></ul></li></ul></li><li>作为用户和计算机硬件之间的接口<ul><li>功能<ul><li>命令接口：允许用户直接使用<ul><li>联机命令接口：用户说一句，操作系统做一句（交互式命令接口）</li><li>脱机命令接口：用户说一堆，操作系统做一堆（批处理命令接口）</li></ul></li><li>程序接口：允许用户用过程序间接使用（系统调用&#x2F;广义指令）</li><li>GUI（图形用户界面）</li></ul></li><li>目标<ul><li>方便用户使用</li></ul></li></ul></li><li>作为最接近硬件的层次<ul><li>功能和目标<ul><li>需要实现对硬件机器的扩展</li><li>没有任何软件支持的计算机称为裸机。在裸机上安装的操作系统可以提供资源管理功能和方便用户的服务功能，将裸机改造橙功能更强，使用更方便的机器</li><li>通常把覆盖了软件的机器称为扩充机器，又称之为虚拟机</li></ul></li></ul></li></ul><p><img src="/picture/image-20220317144853609.png" alt="image-20220317144853609"></p><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><h4 id="操作系统的四个特征"><a href="#操作系统的四个特征" class="headerlink" title="操作系统的四个特征"></a>操作系统的四个特征</h4><ul><li>并发</li><li>共享</li><li>虚拟</li><li>异步</li></ul><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><ul><li><p>并发：指两个或者多个事件在同一个时间间隔内发生。这些事情宏观上同时发生的，但在微观上是交替发生的。</p><p>易混淆–并行：指两个或者多个事件在同一个时刻同时发生。</p></li><li><p>操作系统的并发性指计算机系统中同时存在着多个运行着的程序。</p><p>一个单核处理机（CPU）同一时刻只能执行一个程序，因此操作系统会负责协调多个程序交替执行(这些程序微观上是交替执行的，但宏观上看起来就像在同时执行)</p><p>事实上，操作系统就是伴随着”多道程序技术“而出现的。因此，操作系统和程序并发是一起诞生的</p></li><li><p>当今的计算机，一般都是多核cpu，如4核cpu这就意味着同一个时刻可以有4个程序并行执行，但是操作系统的并发性依然必不可少</p></li></ul><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><ul><li>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用</li><li>两种资源共享方式<ul><li>互斥共享：一个时间端只允许一个进程访问该资源</li><li>同时共享：允许一个时间段内由多个进程“同时”对它们进行访问（所谓的“同时”往往是宏观上的，但是微观上<strong>有可能</strong>是交替对该资源进行访问，即分时共享）</li></ul></li><li>并发与共享的关系：互为存在条件</li></ul><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><ul><li>虚拟是指把一个物理上的实体变为若干逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受到的。</li><li>虚拟技术<ul><li>空分复用技术（如虚拟存储器技术）</li><li>时分复用技术（如虚拟处理器–cpu）</li></ul></li></ul><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><ul><li>异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</li><li>只有系统拥有并发性，才有可能导致异步性</li></ul><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><ul><li>理解并发和并发的区别</li><li>并发和共享互为存在条件</li><li>没有并发和共享，就谈不上虚拟和异步，因此并发和共享是操作系统的两个最基本的特性</li></ul><h2 id="操作系统的发展和分类"><a href="#操作系统的发展和分类" class="headerlink" title="操作系统的发展和分类"></a>操作系统的发展和分类</h2><p><img src="/picture/image-20220317203705558.png" alt="image-20220317203705558"></p><h4 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h4><ul><li><p>人–字带机–计算机—字带机人</p></li><li><p>主要缺点：用户独占全机，人机速度矛盾导致资源利用率低</p></li></ul><h4 id="批次处理阶段–单道批处理系统"><a href="#批次处理阶段–单道批处理系统" class="headerlink" title="批次处理阶段–单道批处理系统"></a>批次处理阶段–单道批处理系统</h4><ul><li><p>引入脱机输入&#x2F;输出技术（利用磁带技术），并监督程序负责控制作业的输入，输出</p></li><li><p>人–自带机—外围机–磁带–计算机–磁带–……</p></li><li><p>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升</p></li><li><p>主要缺点：内存中仅能由一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I&#x2F;O完成。资源利用率依然很低</p></li></ul><h4 id="批处理阶段–多道批处理系统"><a href="#批处理阶段–多道批处理系统" class="headerlink" title="批处理阶段–多道批处理系统"></a>批处理阶段–多道批处理系统</h4><ul><li>在磁带部分，每次往内存中输入多道程序</li><li>操作系统正式诞生，并引入中断技术，由操作系统负责管理这些程序的运行。各个程序并发执行。</li><li>主要优点:多道程序并发执行，共享计算机资源。资源利用率大幅度提升，CPU和其他资源保持“忙碌”状态，系统吞吐量增大。</li><li>主要缺点：用户响应时间长，没有人机交互功能（用户提升自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行）</li></ul><h4 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h4><ul><li>分时操作系统：计算机以时间片为单位轮流为各个用户&#x2F;作业服务，各个用户可通过终端与计算机进行交互</li><li>主要优点：用户请求可以被即时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在</li><li>主要缺点：不能优先处理一些紧急任务。操作系统对各个用户&#x2F;作业都是完全公平的，循环地为每个用户&#x2F;作业服务一个时间片，不能区分任务的紧急性。</li></ul><h4 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h4><ul><li>主要优点：能够优先响应一些紧急任务，某些紧急任务不需要时间片排队。</li><li>在实时操作系统的控制下，计算机系统接收道外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</li><li>分类：<ul><li>硬实时操作系统：必须在绝对严格的规定时间内完成处理</li><li>软实时操作系统：能接受偶尔违反时间规定</li></ul></li></ul><h4 id="其他操作系统"><a href="#其他操作系统" class="headerlink" title="其他操作系统"></a>其他操作系统</h4><ul><li>网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，实现数据传送等功能，实现网络中各种资源的共享（如文件的共享）和各个计算机之间的通信。（如：Windows NT</li><li>分布式操作系统：主要特点是分布性和并行性。系统中的各台计算机地位相同，任何工作都可以分布在这些计算机上，由他们并行，协同完成这个任务。</li><li>个人计算机操作系统：如Windows xp，MacOs</li></ul><h2 id="操作系统的运行机制和体系结构"><a href="#操作系统的运行机制和体系结构" class="headerlink" title="操作系统的运行机制和体系结构"></a>操作系统的运行机制和体系结构</h2><p><img src="/picture/image-20220318152656657.png"></p><h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h4><p>指令和代码的区别：代码——&gt;翻译——&gt;指令</p><p>指令就是处理器（CPU）能够识别，执行的最基本命令</p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><h4 id="两种指令"><a href="#两种指令" class="headerlink" title="两种指令"></a>两种指令</h4><ul><li>特权指令：如内存清零指令（不允许用户程序使用）</li><li>非特权指令：如普通的运算指令</li></ul><h4 id="两种处理器状态"><a href="#两种处理器状态" class="headerlink" title="两种处理器状态"></a>两种处理器状态</h4><ul><li>用户态（目态）：此时CPU只能执行非特权指令</li><li>核心态（管态）：特权指令，非特权指令都可以执行</li></ul><p>Ps:用程序状态寄存器（PSW）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态</p><h4 id="两种程序"><a href="#两种程序" class="headerlink" title="两种程序"></a>两种程序</h4><ul><li>内核程序：操作系统的内核程序是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态</li><li>应用程序：为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态</li></ul><h3 id="操作系统的内核"><a href="#操作系统的内核" class="headerlink" title="操作系统的内核"></a>操作系统的内核</h3><ul><li>内核是计算机上配置的底层软件，是操作系统最基本，最核心的部分。</li><li>实现操作系统内核功能的那些程序就是内核程序。</li></ul><p><img src="/picture/image-20220318155126326.png" alt="image-20220318155126326"></p><p><img src="/picture/image-20220318155148226.png" alt="image-20220318155148226"></p><h3 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h3><h4 id="大内核"><a href="#大内核" class="headerlink" title="大内核"></a>大内核</h4><ul><li>将操作系统的主要功能模块都作为系统内核，运行在核心态</li><li>优点：高性能</li><li>缺点：内核代码庞大，结构混乱，难以维护</li></ul><h4 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h4><ul><li>只把最基本的功能保留在内核</li><li>优点：内核功能少，结构清晰，方便维护</li><li>缺点：需要频繁地在核心态和用户态之间切换，性能低</li></ul><p><img src="/picture/image-20220318160402910.png" alt="image-20220318160402910"></p><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p><img src="/picture/image-20220318181900829.png" alt="image-20220318181900829"></p><h4 id="中断机制的诞生"><a href="#中断机制的诞生" class="headerlink" title="中断机制的诞生"></a>中断机制的诞生</h4><ul><li>为了解决早期计算机各个程序只能串行执行，系统利用率低的问题；人们发明了操作系统，引入中断机制，实现了多道程序并发执行</li><li>本质：发生中断就意味着需要操作系统介入，开展管理工作</li></ul><h4 id="中断的概念和作用"><a href="#中断的概念和作用" class="headerlink" title="中断的概念和作用"></a>中断的概念和作用</h4><ol><li>当中断发生时，CPU立即进入核心态</li><li>当中端发生后，当前运行的进程暂停运行，并由操作系统内核对中断进行处理</li><li>对于不同的中断信号，会进行不同的处理</li></ol><ul><li><p>发生了中断，就意味着需要操作系统的介入，开展管理工作。由于操作系统的管理工作（比如进程的切换，分配I&#x2F;O设备等）需要使用特权指令，因此CPU要从用户态转为核心态。中断可以使CPU从用户态切换为核心态，使操作系统获得计算机的控制权。有了中断，才能实现多道程序并发执行。</p></li><li><p>用户态—&gt;核心态 是通过中断实现的，并且中断是唯一途径。</p><p>核心态—&gt;用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为”用户态“</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;操作系统的概念，功能和目标&quot;&gt;&lt;a href=&quot;#操作系统的概念，功能和目标&quot; class=&quot;headerlink&quot; title=&quot;操作系统的概念，功能和目标&quot;&gt;&lt;/a&gt;操作系统的概念，功能和目标&lt;/h2&gt;&lt;h4 id=&quot;操作系统的概念&quot;&gt;&lt;a href=&quot;#操作</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/ufovsmba/2022/03/22/hello-world/"/>
    <id>https://github.com/ufovsmba/2022/03/22/hello-world/</id>
    <published>2022-03-22T04:55:01.615Z</published>
    <updated>2022-03-22T04:55:01.615Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
